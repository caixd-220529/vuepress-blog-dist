const nt="ENTRIES",V="KEYS",T="VALUES",F="";class D{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===F)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==F).join("")}value(){return E(this._path).node.get(F)}result(){switch(this._type){case T:return this.value();case V:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],ot=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return W(e,t,s,n,i,1,o,""),n},W=(e,t,s,n,o,u,i,r)=>{const h=u*i;t:for(const c of e.keys())if(c===F){const d=o[h-1];d<=s&&n.set(r,[e.get(c),d])}else{let d=u;for(let l=0;l<c.length;++l,++d){const p=c[l],f=i*d,g=f-i;let a=o[f];const m=Math.max(0,d-s-1),y=Math.min(i-1,d+s);for(let _=m;_<y;++_){const b=p!==t[_],z=o[g+_]+ +b,A=o[g+_+1]+1,w=o[f+_]+1,L=o[f+_+1]=Math.min(z,A,w);L<a&&(a=L)}if(a>s)continue t}W(e.get(c),t,s,n,o,d,i,r+c)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=O(n);for(const i of o.keys())if(i!==F&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ut(this._tree,t)}entries(){return new D(this,nt)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return ot(this._tree,t,s)}get(t){const s=I(this._tree,t);return s!==void 0?s.get(F):void 0}has(t){const s=I(this._tree,t);return s!==void 0&&s.has(F)}keys(){return new D(this,V)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,M(this._tree,t).set(F,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=M(this._tree,t);return n.set(F,s(n.get(F))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=M(this._tree,t);let o=n.get(F);return o===void 0&&n.set(F,o=s()),o}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==F&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},I=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==F&&t.startsWith(s))return I(e.get(s),t.slice(s.length))},M=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==F&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const h=e.get(u);if(r===u.length)e=h;else{const c=new Map;c.set(u.slice(r),h),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ut=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(F),s.size===0)R(n);else if(s.size===1){const[o,u]=s.entries().next().value;$(n,o,u)}}},R=e=>{if(e.length===0)return;const[t,s]=O(e);if(t.delete(s),t.size===0)R(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==F&&$(e.slice(0,-1),n,o)}},$=(e,t,s)=>{if(e.length===0)return;const[n,o]=O(e);n.set(o+t,s),n.delete(o)},O=e=>e[e.length-1],it=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},rt=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,S="or",q="and",ct="and_not",lt=(e,t)=>{e.includes(t)||e.push(t)},P=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},G=({score:e},{score:t})=>t-e,ht=()=>new Map,k=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},N=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,dt={[S]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),P(n.terms,u)}}return e},[q]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);P(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[ct]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},at=(e,t,s,n,o,u)=>{const{k:i,b:r,d:h}=u;return Math.log(1+(s-t+.5)/(t+.5))*(h+e*(i+1)/(e+i*(1-r+r*n/o)))},ft=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},H=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},gt=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const o=e._index.fetch(n,ht),u=o.get(t);u==null||u.get(s)==null?H(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},mt={k:1.2,b:.7,d:.5},pt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(rt),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof(console==null?void 0:console[e])=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:S,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:mt},Ft={combineWith:q,prefix:(e,t,s)=>t===s.length-1},_t={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},yt={..._t,...U},Y=(e,t=S)=>{if(e.length===0)return new Map;const s=t.toLowerCase();return e.reduce(dt[s])||new Map},B=(e,t,s,n,o,u,i,r,h=new Map)=>{if(o==null)return h;for(const c of Object.keys(u)){const d=u[c],l=e._fieldIds[c],p=o.get(l);if(p==null)continue;let f=p.size;const g=e._avgFieldLength[l];for(const a of p.keys()){if(!e._documentIds.has(a)){gt(e,l,a,s),f-=1;continue}const m=i?i(e._documentIds.get(a),s,e._storedFields.get(a)):1;if(!m)continue;const y=p.get(a),_=e._fieldLength.get(a)[l],b=at(y,f,e._documentCount,_,g,r),z=n*d*m*b,A=h.get(a);if(A){A.score+=z,lt(A.terms,t);const w=N(A.match,s);w?w.push(c):A.match[s]=[c]}else h.set(a,{score:z,terms:[t],match:{[s]:[c]}})}}return h},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((a,m)=>({...a,[m]:N(n.boost,m)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:h}=n,{fuzzy:c,prefix:d}={...J.weights,...i},l=e._index.get(t.term),p=B(e,t.term,t.term,1,l,o,u,h);let f,g;if(t.prefix&&(f=e._index.atPrefix(t.term)),t.fuzzy){const a=t.fuzzy===!0?.2:t.fuzzy,m=a<1?Math.min(r,Math.round(t.term.length*a)):a;m&&(g=e._index.fuzzyGet(t.term,m))}if(f)for(const[a,m]of f){const y=a.length-t.term.length;if(!y)continue;g==null||g.delete(a);const _=d*a.length/(a.length+.3*y);B(e,t.term,a,_,m,o,u,h,p)}if(g)for(const a of g.keys()){const[m,y]=g.get(a);if(!y)continue;const _=c*a.length/(a.length+y);B(e,t.term,a,_,m,o,u,h,p)}return p},X=(e,t,s={})=>{if(typeof t!="string"){const d={...s,...t,queries:void 0},l=t.queries.map(p=>X(e,p,d));return Y(l,d.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:h}=i,c=r(t).flatMap(d=>h(d)).filter(d=>!!d).map(ft(i)).map(d=>At(e,d,i));return Y(c,i.combineWith)},K=(e,t,s={})=>{const n=X(e,t,s),o=[];for(const[u,{score:i,terms:r,match:h}]of n){const c=r.length,d={id:e._documentIds.get(u),score:i*c,terms:Object.keys(h),match:h};Object.assign(d,e._storedFields.get(u)),(s.filter==null||s.filter(d))&&o.push(d)}return o.sort(G),o},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of K(e,t,s)){const r=i.join(" "),h=n.get(r);h!=null?(h.score+=u,h.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:h}]of n)o.push({suggestion:u,terms:r,score:i/h});return o.sort(G),o};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if((t==null?void 0:t.fields)==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?yt:t.autoVacuum;this._options={...pt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...Ft,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:h,serializationVersion:c},d)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const l=new Et(d);l._documentCount=t,l._nextId=s,l._documentIds=k(n),l._idToShortId=new Map,l._fieldIds=o,l._fieldLength=k(u),l._avgFieldLength=i,l._storedFields=k(r),l._dirtCount=h||0,l._index=new C;for(const[p,f]of l._documentIds)l._idToShortId.set(f,p);for(const[p,f]of e){const g=new Map;for(const a of Object.keys(f)){let m=f[a];c===1&&(m=m.ds),g.set(parseInt(a,10),k(m))}l._index.set(p,g)}return l},Q=Object.entries,wt=Object.fromEntries,j=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(c,d=!1)=>{let l="";i===0?l=c.length>20?`… ${c.slice(-20)}`:c:d?l=c.length+i>100?`${c.slice(0,100-i)}… `:c:l=c.length>20?`${c.slice(0,20)} … ${c.slice(-20)}`:c,l&&o.push(l),i+=l.length,d||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let h=s.indexOf(n,u);if(h===-1)return null;for(;h>=0;){const c=h+n.length;if(r(e.slice(u,h)),u=c,i>100)break;h=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},Z=/[\u4e00-\u9fa5]/g,tt=(e={})=>({fuzzy:.2,prefix:!0,processTerm:t=>{const s=t.match(Z)||[],n=t.replace(Z,"").toLowerCase();return n?[n,...s]:[...s]},...e}),xt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),kt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),et=(e,t,s={})=>{const n={};return K(t,e,tt({boost:{h:2,t:1,c:4},...s})).forEach(o=>{const{id:u,terms:i,score:r}=o,h=u.includes("@"),c=u.includes("#"),[d,l]=u.split(/[#@]/),{contents:p}=n[d]??={title:"",contents:[]};if(h)p.push([{type:"customField",key:d,index:l,display:i.map(f=>o.c.map(g=>j(g,f))).flat().filter(f=>f!==null)},r]);else{const f=i.map(g=>j(o.h,g)).filter(g=>g!==null);if(f.length&&p.push([{type:c?"heading":"title",key:d,...c&&{anchor:l},display:f},r]),"t"in o)for(const g of o.t){const a=i.map(m=>j(g,m)).filter(m=>m!==null);a.length&&p.push([{type:"text",key:d,...c&&{anchor:l},display:a},r])}}}),Q(n).sort(([,o],[,u])=>"max"==="total"?xt(o,u):kt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=it(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},st=(e,t,s={})=>Ct(t,e,tt(s)).map(({suggestion:n})=>n),v=wt(Q(JSON.parse("{\"/\":{\"documentCount\":15,\"nextId\":15,\"documentIds\":{\"0\":\"v-184f4da6\",\"1\":\"v-8daa1a0e\",\"2\":\"v-8d265562\",\"3\":\"v-7c80db8b\",\"4\":\"v-76122692\",\"5\":\"v-76122692#线性可分支持向量机定义\",\"6\":\"v-76122692#间隔的定义\",\"7\":\"v-76122692#线性可分支持向量机的学习目标化简\",\"8\":\"v-76122692#通过kkt条件求解参数\",\"9\":\"v-76122692#线性支持向量机\",\"10\":\"v-76122692#弱对偶关系的证明\",\"11\":\"v-76122692#对偶性的几何解释\",\"12\":\"v-76122692#slater-condition\",\"13\":\"v-76122692#kkt-condition\",\"14\":\"v-e1e3da16\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[2,9],\"1\":[1,5],\"2\":[2,16],\"3\":[1,10],\"4\":[2,24],\"5\":[6,108],\"6\":[3,48],\"7\":[9,155],\"8\":[5,178],\"9\":[4,119],\"10\":[5,112],\"11\":[4,156],\"12\":[3,103],\"13\":[3,81],\"14\":[1,10]},\"averageFieldLength\":[3.4,75.6],\"storedFields\":{\"0\":{\"h\":\"关于我\",\"t\":[\"一个普普通通的大学生，超想躺平😣。\"]},\"1\":{\"h\":\"主页\",\"t\":[\"真的到底啦  ❗\"]},\"2\":{\"h\":\"init!\",\"t\":[\"尝试通过vuepress搭建个人博客，勉强算是搭起来，之后且走且看。\"]},\"3\":{\"h\":\"随笔\",\"t\":[\"点击左侧目录，浏览全部随笔。⬅️\"]},\"4\":{\"h\":\"SVM简介\",\"t\":[\"支持向量机(SVM)是一种二类分类模型. 本篇博客将主要记录线性可分支持向量机中的学习算法.\"]},\"5\":{\"h\":\"线性可分支持向量机定义\",\"t\":[\"线性可分支持向量机通常被称为硬间隔支持向量机, 其通过一个超平面来分离特征空间中的样本点. 样本点的集合记作:\",\"{(xi​,yi​)}i=1N​,xi​∈Rn,yi​∈{−1,1}\",\"分割超平面则写作:\",\"wTx+b=0\",\"其中, w为一个n维向量, b为实数.\",\"在硬间隔SVM中, 分割超平面应该能够正确划分样本点的集合, 并且最大化样本点到分割超平面的距离. 这个距离称为间隔(margin). 因此, 硬间隔SVM的学习目标可以写作:\",\"{max(margin(w,b))s.t.yi​(wTxi​+b)≥0,i=1,2,⋯,N​\",\"其中, max(margin(w,b))表示了将间隔进行最大化, 而yi​(wTxi​+b)≥0,i=1,2,⋯,N则表示了样本点的集合能够被分割超平面正确划分. 为了方便求解最优化问题, 可以将yi​(wTxi​+b)≥0,i=1,2,⋯,N记作\",\"∃γ≥0,s.t.min(yi​(wTxi​+b))=γ,i=1,2,⋯,N\",\"注意到对w和b同时进行缩放并不会影响超平面的位置, 但是却会影响γ的取值. 因此, 我们可以直接令γ=1, 而不影响最优化问题的求解.\"]},\"6\":{\"h\":\"间隔的定义\",\"t\":[\"为了求解上述的优化问题, 我们首先需要定义间隔. 间隔被定义为所有样本点到超平面的距离中的最小距离. 因此, marigin的计算公式为:\",\"margin(w,b)=min(distance)=i=1,2,⋯,Nmin​∣∣w∣∣∣wTxi​+b∣​\",\"故:\",\"w,bmax​(margin(w,b))=w,bmax​(xi​,yi​min​∣∣w∣∣∣wTxi​+b∣​)=w,bmax​(∣∣w∣∣1​xi​,yi​min​∣wTxi​+b∣)=w,bmax​(∣∣w∣∣1​)\"]},\"7\":{\"h\":\"线性可分支持向量机的学习目标化简\",\"t\":[\"经过化简, 原问题化简为\",\"{maxw,b​(∣∣w∣∣1​)s.t.minxi​,yi​​∣wTxi​+b∣=1,i=1,2,⋯,N​\",\"其等价于\",\"{minw,b​(21​wTw)(1−yi​(wTxi​+b))≤0​​​​\",\"在下面的叙述中, 将上式简称为原问题. 为了求解改有约束的最优化问题, 应用拉格朗日乘子法. 定义\",\"l(w,b,λ)=21​wTw+i=1∑N​λi​(1−yi​(wTxi​+b))\",\"其中λi​≥0≤0. 则原问题应用拉格朗日函数之后可以转化为:\",\"{minw,b​maxλ​l(w,b,λ)s.t.λi​≥0​​​​\",\"在下面的叙述中, 称式为原问题的拉格朗日形式. 下面证明原问题与原问题的拉格朗日形式是等价的\",\"如果(1−yi​(wTxi​+b))>0, 则maxλ​l(w,b,λ)=21​wTw+∞=∞\",\"如果(1−yi​(wTxi​+b))≤0, 则maxλ​l(w,b,λ)=21​wTw+0=0=21​wTw\",\"综上, minw,b​maxλ​l(w,b,λ)=minw,b​(0,21​wTw)=minw,b​(21​wTw)\",\"将原问题的拉格朗日形式转化为其对偶问题, 并称其为原问题的拉格朗日形式的对偶问题.\",\"{maxλ​minw,b​l(w,b,λ)s.t.λi​≥0​​​​\",\"对于对偶问题, 一共存在两种对偶关系, 分别称作强对偶关系和弱对偶关系. 其中\",\"弱对偶关系保证: minmaxl≥maxminl\",\"强对偶关系保证: minmaxl=maxminl\",\"由于原问题的目标函数为二次的, 且所有约束为线性的, 故其为凸优化问题. 并且, 其满足Slater条件, 故强对偶成立. 因此, 原问题的拉格朗日形式与原问题的拉格朗日形式的对偶问题是等价的. 强对偶关系成立的简要证明, 将会在本篇博客的末尾给出.\",\"让我们回到优化问题的求解上. 在将原问题转化为原问题的拉格朗日形式的对偶问题之后, 为了求解minw,b​l(w,b,λ)分别对w和b求偏导. 首先将l(w,b,λ)对b求偏导, 有\",\"∂b∂l​=∂b∂​[i=1∑N​λi​(1−yi​(wTxi​+b))]=∂b∂​[−i=1∑N​λi​yi​b]=−i=1∑N​λi​yi​=0\",\"将∑i=1N​λi​yi​=0代入l(w,b,λ), 有\",\"l(w,b,λ)​=21​wTw+i=1∑N​λi​−i=1∑N​λi​yi​(wTxi​+b)=21​wTw+i=1∑N​λi​−i=1∑N​λi​yi​wTxi​+bi=1∑N​λi​yi​=21​wTw+i=1∑N​λi​−i=1∑N​λi​yi​wTxi​​​\",\"之后将l(w,b,λ)对b求偏导, 可得\",\"∂b∂l​=21​2w−i=1∑N​λi​yi​xi​=0w=i=1∑N​λi​yi​xi​\",\"将w=∑i=1N​λi​yi​xi​代入l(w,b,λ), 有\",\"l(w,b,λ)​=21​(i=1∑N​λi​yi​xi​)T(i=1∑N​λi​yi​xi​)+i=1∑N​λi​−i=1∑N​λi​yi​(i=1∑N​λi​yi​xi​)Txi​=21​i=1∑N​j=1∑N​λi​λj​yi​yj​xiT​xj​+i=1∑N​λi​−i=1∑N​j=1∑N​λi​λj​yi​yj​xiT​xj​=−21​i=1∑N​j=1∑N​λi​λj​yi​yj​xiT​xj​+i=1∑N​λi​​​\",\"至此, 我们将原问题的拉格朗日形式的对偶问题转化为了\",\"{maxλ​(−21​∑i=1N​∑j=1N​λi​λj​yi​yj​xiT​xj​+∑i=1N​λi​)s.t.λi​≥0​​​​\",\"简单小结一下, 我们一共对原问题进行了三次转化, 分别是\",\"(1)⇒(2): 通过拉格朗日乘子法, 将有约束的最优化问题转化为了有约束的最优化问题\",\"(2)⇒(3): 通过强对偶关系, 交换了min和max的位置\",\"(3)⇒(4): 通过求偏导, 消去了内部的max\"]},\"8\":{\"h\":\"通过KKT条件求解参数\",\"t\":[\"原问题、对偶问题满足强对偶关系和KKT条件成立互为充分必要条件. 因此, 我们可以通过KKT条件求解相关参数. 首先介绍KKT条件. 强对偶关系KKT条件的相互推到在本篇博客的末尾会有简要解释. 对于(4), 其满足以下KKT条件:\",\"⎩⎨⎧​∂w∂l​=0,∂b∂l​=0λi​(1−yi​(wTxi​+b))=0λi​≥01−yi​(wTxi​+b)≥0​\",\"其中, λi​(1−yi​(wTxi​+b))=0又被称为是互补松弛条件(slackness complementary).\",\"在上一小节的推到中, 我们已经得到了在l(w,b,λ)取得最小值时, w=∑i=1N​λi​yi​xi​. 记此w为w∗. 所以, 我们已经得到了通过xi​,yi​,λi​来表示w∗的方法. 接下来, 我们将通过KKT条件, 尝试同样通过xi​,yi​,λi​来表示b∗.\",\"我们先假设∃(xk​,yk​),s.t.1−yk​(wTxk​+b)=0. 注意到yk​∈{1,−1}\",\"yk​(wTxk​+b)=1⇔yk2​(wTx+b)=yk​⇔(wTx+b)=yk​⇔b∗=yk​−wTxk​⇔b∗=yk​−i=1∑N​λi​yi​xiT​xk​\",\"至此, 我们已经得到了w∗,b∗的表达式\",\"{w∗=∑i=1N​λi​yi​xi​b∗=yk​−∑i=1N​λi​yi​xiT​xk​​​​​\",\"从表达式可以看出, 只有当λi​=0时, 样本点才会影响决策平面的生成. 在什么情况下λi​=0呢？根据KKT条件, λi​=0当且仅当1−yi​(wTxi​+b)=0. 因此, 只有分布在yi​(wTxi​+b)=1上的样本点才会影响决策平面的生成. 我们称这些向量为支持向量.\",\"从上图可以看出, 只有在虚线上的点对应的λi​不为零, 而其余的点对应的λi​均为零. 当我们在虚线内部增加新的样本点时, 决策平面会发生变化；而在虚线外部增加新的样本点时, 决策平面不会发生变化, 因为这些样本点不会改变支持向量.\",\"至此, 我们已经完成了线性可分支持向量机的参数的推导和求解. 由于(4)式为一个单纯最优化问题, 求解λi​并不困难. 当求解出λi​后, 代入(5)即可计算出线性可分支持向量机的全部参数.\"]},\"9\":{\"h\":\"线性支持向量机\",\"t\":[\"然而, 线性可分支持向量机并不是一个很好的模型, 其对于噪声点非常敏感, 并且只能处理线性可分的数据. 因此, 我们需要对线性可分支持向量机进行改进, 使其能够处理线性不可分的数据. 这就是线性支持向量机的由来. 线性支持向量机又被称为软间隔支持向量机, 其能够允许一定的错误loss. 软间隔支持向量机的学习目标为:\",\"min(21​wTw+loss)\",\"我们通过以下方式定义loss\",\"如果 yi​(wTxi​+b)≥1, 则loss=0\",\"如果 yi​(wTxi​+b)<1, 则loss=1−yi​(wTxi​+b)\",\"因此, 软间隔支持向量机的求解实际上就是解决以下最优化问题\",\"{minw,b​(21​wTw)+C∑i=1N​max{0,1−yi​(wTxi​+b)}s.t.(1−yi​(wTxi​+b))≤0​\",\"其中, C为超参数. 用来控制对错误分类的惩罚程度.\",\"通常, 令ξi​=1−yi​(wTxi​+b), 并限制ξi​≥0, 则上式可以写作\",\"{minw,b​(21​wTw)+C∑i=1N​ξi​s.t.yi​(wTxi​+b)≥1−ξi​​\",\"软间隔支持向量机的参数求解步骤和硬间隔支持向量机比较相似, 并且w∗,b∗的表达式也相同. 因此, 我们不再赘述.\"]},\"10\":{\"h\":\"弱对偶关系的证明\",\"t\":[\"我们首先给出一个标准优化问题的通用表达形式\",\"⎩⎨⎧​minx∈Rn​f(x)s.t.mi​(x)≤0,i=1,2,⋯,Mnj​(x)=0,j=1,2,⋯,N​​​​\",\"其对应得到拉格朗日函数为\",\"l(x,λ,η)=f(x)+i=1∑M​λi​mi​(x)+j=1∑N​ηj​nj​(x)(λi​≥0)\",\"因此, 我们可以将标准优化问题转化为\",\"{minx​maxλ,η​l(x,λ,η)s.t.λi​≥0​​​​\",\"其对偶问题为\",\"{maxλ,η​minx​l(x,λ,η)s.t.λi​≥0​\",\"我们首先证明(6)和(7)是等价的.\",\"如果x违反了约束mi​(x), 即mi​(x)>0, 则maxλ​l→∞\",\"如果x符合约束mi​(x), 则maxλ​l=∞\",\"假如x违反了约束, 那么在minx​maxλ​l(xgood​)=minx​{max(l(xgood​)),∞}=minx​maxλ​l(xgood​), xbad​所代表的∞不会成为最终结果. 故(6)和(7)是等价的.\",\"其次再来证明弱对偶性. 要证明弱对偶性, 即证明:\",\"对偶问题的解≤原问题的解\",\"记对偶问题的解为d∗, 原问题的解为p∗. 我们需要证明的便是\",\"d∗≤p∗\",\"注意到\",\"xmin​l(x,λ,η)≤l(x,λ,η)≤λ,ηmax​l(x,λ,η)\",\"恒成立, 故\",\"max(xmin​l(x,λ,η))≤min(λ,ηmax​l(x,λ,η))\",\"弱对偶性得证.\"]},\"11\":{\"h\":\"对偶性的几何解释\",\"t\":[\"为了通过几何图形对对偶性进行解释, 我们首先对原问题进行化简\",\"{minx∈Rn​f(x)s.t.m1​(x)≤0​​​​\",\"记x的定义域为D, 则D=dom(f)∩dom(mi​). 其拉格朗日形式为\",\"l(x,λ)=f(x)+λm1​(x)(λ≥0)​​\",\"记对偶问题的解为d∗, 原问题的解为p∗. 则\",\"p∗=min(f(x))d∗=λmax​xmin​l(x,λ)\",\"定义集合G.\",\"G={(m1​(x),f(x))∣x∈D}={(μ,t)∣x∈D}\",\"由于此时我们并不知道原问题是否为凸优化问题, 因此我们通过下图来表示G的形状.\",\"p∗的取值为\",\"p∗=inf{t∣(μ,t)∈G,μ≤0}\",\"即当μ≤0时, t的最小值即为p∗. 其在图中的表示形式为\",\"d∗的取值为\",\"d∗=λmax​xmin​(l(x,λ))=λmax​xmin​(t+λμ)=λmax​(g(λ))g(λ)=inf{t+λμ∣(μ,t)∈G}\",\"不妨令t+λμ=Δ. 我们可以将其进行变形, 转化为t=−λμ+Δ. 此时在图中, −λ为斜率, 而Δ为截距. 由于λ≥0, 故直线的形状如下图所示. 不难发现, 有许多条直线与G所在的区域相交. 当直线与图形的下边界的某一部分相切时, Δ取得最小值. 比如说, 此时直线与区域总共有100个交点Δ1​,…,Δ100​(图中用蓝色线表示), 那么此时Δ取得最小值为{Δ1​,…,Δ100​}这个集合的下确界, Δ1​.\",\"那么, 什么时候g(λ)将取得最大值呢? 当直线同时与G的下半部分的两个点相切时(图中红色线), g(λ)将取得最大值, 即为d∗.\",\"不难发现, 只有当图形为凸时, 才能够保证d∗=p∗, 保证强对偶关系的成立. 然而, 想要使得强对偶关系成立, 原问题为凸优化问题是远远不够的. 我们还需要保证slater条件的成立.\"]},\"12\":{\"h\":\"slater condition\",\"t\":[\"先假设需要解决的优化问题为:\",\"{minx∈Rn​f(x)s.t.mi​(x)≤0,i=1,2,⋯,M​\",\"则slater condition为\",\"∃x^∈relintD,s.t.mi​(x0​)<0,i=1,2,⋯,M\",\"其中, relint的含义为relative interior(相对内部).\",\"对于大多数凸优化问题, slater条件成立\",\"放松的slater条件: 假设在M中有K个仿射函数(最高次数为1的多项式函数), 则只用校验剩下的M−K个函数即可.\",\"由于支持向量机天然满足放松的slater条件, 因此认为其满足强对偶关系. 实际上. Slater条件的本质是保证了G在μ≤0的部分有解, 确保了原问题是存在解的.应该注意的是\",\"凸优化问题+slatercondition⇒strongduality\",\"但反过来并不成立\"]},\"13\":{\"h\":\"KKT condition\",\"t\":[\"假设原问题, 原问题的拉格朗日函数, 原问题的对偶问题分别为\",\"⎩⎨⎧​minf(x)s.t.mi​(x)≤0,i=1,2,⋯,Mnj​(x)=0,j=1,2,⋯,N​\",\"{l(x,λ,η)=f(x)+∑i=1M​λi​mi​(x)+∑j=1N​ηj​nj​(x)g(λ,η)=minx​l(x,λ,η)​\",\"{maxλ,η​g(λ,η)s.t.λi​≥0,i=1,2,⋯,M​\",\"则KKT条件为\",\"⎩⎨⎧​可行条件:⎩⎨⎧​mi​(x)≤0,i=1,2,⋯,Mnj​(x)=0,j=1,2,⋯,Nλi​≥0,i=1,2,⋯,M​互补松弛:λi​mi​(x)=0,i=1,2,⋯,M梯度为0:∇x​l(x,λ,η)=0​\",\"由定义知\",\"d∗​=λ,ηmax​(λ,η)=g(λ∗,η∗)=xmin​l(x,λ∗,η∗)≤l(x∗,λ∗,η∗)=f(x∗)+i=1∑M​λi∗​mi​(x∗)+j=1∑N​ηj∗​nj​(x∗)≤f(x∗)=p∗​\",\"关于第一个≤, 由于minx​l(x,λ∗,η∗)≤l(x,λ∗,η∗)对任意的x都成立, 所以当x=x∗时当然也成立\",\"关于第二个≤, 由于∑j=1N​ηj∗​nj​(x∗)=0, ∑i=1M​λi∗​mi​(x∗)≤0, 所以≤成立\",\"由于为强对偶关系, 两个≤只能为=, 所以有\",\"λi​mi​(x)=0,i=1,2,⋯,M\"]},\"14\":{\"h\":\"博文\",\"t\":[\"点击左侧目录，浏览全部文章。⬅️\"]}},\"dirtCount\":0,\"index\":[[\"文章\",{\"1\":{\"14\":1}}],[\"博文\",{\"0\":{\"14\":1}}],[\"博客\",{\"1\":{\"2\":1,\"4\":1,\"7\":1,\"8\":1}}],[\"第二个\",{\"1\":{\"13\":1}}],[\"第一个\",{\"1\":{\"13\":1}}],[\"都\",{\"1\":{\"13\":1}}],[\"任意\",{\"1\":{\"13\":1}}],[\"知\",{\"1\":{\"13\":1}}],[\"∇\",{\"1\":{\"13\":1}}],[\"梯度\",{\"1\":{\"13\":1}}],[\"反过来\",{\"1\":{\"12\":1}}],[\"但\",{\"1\":{\"12\":1}}],[\"但是\",{\"1\":{\"5\":1}}],[\"确保\",{\"1\":{\"12\":1}}],[\"确界\",{\"1\":{\"11\":1}}],[\"本质\",{\"1\":{\"12\":1}}],[\"本篇\",{\"1\":{\"4\":1,\"7\":1,\"8\":1}}],[\"认为\",{\"1\":{\"12\":1}}],[\"天然\",{\"1\":{\"12\":1}}],[\"剩下\",{\"1\":{\"12\":1}}],[\"校验\",{\"1\":{\"12\":1}}],[\"多项式\",{\"1\":{\"12\":1}}],[\"次数\",{\"1\":{\"12\":1}}],[\"仿射\",{\"1\":{\"12\":1}}],[\"k\",{\"1\":{\"12\":2}}],[\"kkt\",{\"0\":{\"8\":1,\"13\":1},\"1\":{\"8\":7,\"13\":1}}],[\"放松\",{\"1\":{\"12\":2}}],[\"大多数\",{\"1\":{\"12\":1}}],[\"大学生\",{\"1\":{\"0\":1}}],[\"含义\",{\"1\":{\"12\":1}}],[\"relative\",{\"1\":{\"12\":1}}],[\"relint\",{\"1\":{\"12\":1}}],[\"relintd\",{\"1\":{\"12\":1}}],[\"rn\",{\"1\":{\"5\":1,\"10\":1,\"11\":1,\"12\":1}}],[\"^\",{\"1\":{\"12\":1}}],[\"还\",{\"1\":{\"11\":1}}],[\"远远不够\",{\"1\":{\"11\":1}}],[\"想要\",{\"1\":{\"11\":1}}],[\"红色\",{\"1\":{\"11\":1}}],[\"两个\",{\"1\":{\"11\":1,\"13\":1}}],[\"两种\",{\"1\":{\"7\":1}}],[\"部分\",{\"1\":{\"11\":1,\"12\":1}}],[\"半\",{\"1\":{\"11\":1}}],[\"?\",{\"1\":{\"11\":1}}],[\"线\",{\"1\":{\"11\":2}}],[\"线性\",{\"0\":{\"5\":1,\"7\":1,\"9\":1},\"1\":{\"4\":1,\"5\":1,\"7\":1,\"8\":2,\"9\":6}}],[\"蓝色\",{\"1\":{\"11\":1}}],[\"…\",{\"1\":{\"11\":2}}],[\"交点\",{\"1\":{\"11\":1}}],[\"交换\",{\"1\":{\"7\":1}}],[\"个\",{\"1\":{\"11\":1,\"12\":2}}],[\"个人\",{\"1\":{\"2\":1}}],[\"总共\",{\"1\":{\"11\":1}}],[\"比如说\",{\"1\":{\"11\":1}}],[\"比较\",{\"1\":{\"9\":1}}],[\"某\",{\"1\":{\"11\":1}}],[\"边界\",{\"1\":{\"11\":1}}],[\"区域\",{\"1\":{\"11\":2}}],[\"许多条\",{\"1\":{\"11\":1}}],[\"发现\",{\"1\":{\"11\":2}}],[\"发生变化\",{\"1\":{\"8\":2}}],[\"如下\",{\"1\":{\"11\":1}}],[\"如果\",{\"1\":{\"7\":2,\"9\":2,\"10\":2}}],[\"直线\",{\"1\":{\"11\":5}}],[\"直接\",{\"1\":{\"5\":1}}],[\"截距\",{\"1\":{\"11\":1}}],[\"斜率\",{\"1\":{\"11\":1}}],[\"变形\",{\"1\":{\"11\":1}}],[\"δ\",{\"1\":{\"11\":10}}],[\"形状\",{\"1\":{\"11\":2}}],[\"形式\",{\"1\":{\"7\":8,\"11\":2}}],[\"此时\",{\"1\":{\"11\":4}}],[\"μ\",{\"1\":{\"11\":9,\"12\":1}}],[\"g\",{\"1\":{\"11\":11,\"12\":1,\"13\":3}}],[\"∩\",{\"1\":{\"11\":1}}],[\"几何图形\",{\"1\":{\"11\":1}}],[\"几何\",{\"0\":{\"11\":1}}],[\"得证\",{\"1\":{\"10\":1}}],[\"得到\",{\"1\":{\"8\":3,\"10\":1}}],[\"恒\",{\"1\":{\"10\":1}}],[\"便是\",{\"1\":{\"10\":1}}],[\"p\",{\"1\":{\"10\":2,\"11\":6,\"13\":1}}],[\"dom\",{\"1\":{\"11\":2}}],[\"d\",{\"1\":{\"10\":2,\"11\":10,\"13\":1}}],[\"distance\",{\"1\":{\"6\":1}}],[\"要\",{\"1\":{\"10\":1}}],[\"再来\",{\"1\":{\"10\":1}}],[\"结果\",{\"1\":{\"10\":1}}],[\"成为\",{\"1\":{\"10\":1}}],[\"成立\",{\"1\":{\"7\":2,\"8\":1,\"10\":1,\"11\":3,\"12\":2,\"13\":3}}],[\"代表\",{\"1\":{\"10\":1}}],[\"代入\",{\"1\":{\"7\":2,\"8\":1}}],[\"那么\",{\"1\":{\"10\":1,\"11\":2}}],[\"假如\",{\"1\":{\"10\":1}}],[\"假设\",{\"1\":{\"8\":1,\"12\":2,\"13\":1}}],[\"符合\",{\"1\":{\"10\":1}}],[\"→\",{\"1\":{\"10\":1}}],[\"即为\",{\"1\":{\"11\":2}}],[\"即当\",{\"1\":{\"11\":1}}],[\"即\",{\"1\":{\"10\":2}}],[\"即可\",{\"1\":{\"8\":1,\"12\":1}}],[\"违反\",{\"1\":{\"10\":2}}],[\"7\",{\"1\":{\"10\":2}}],[\"6\",{\"1\":{\"10\":2}}],[\"η\",{\"1\":{\"10\":13,\"13\":16}}],[\"f\",{\"1\":{\"10\":2,\"11\":5,\"12\":1,\"13\":3}}],[\"标准\",{\"1\":{\"10\":2}}],[\"赘述\",{\"1\":{\"9\":1}}],[\"也\",{\"1\":{\"9\":1,\"13\":1}}],[\"步骤\",{\"1\":{\"9\":1}}],[\"限制\",{\"1\":{\"9\":1}}],[\"ξ\",{\"1\":{\"9\":4}}],[\"程度\",{\"1\":{\"9\":1}}],[\"惩罚\",{\"1\":{\"9\":1}}],[\"控制\",{\"1\":{\"9\":1}}],[\"用来\",{\"1\":{\"9\":1}}],[\"condition\",{\"0\":{\"12\":1,\"13\":1},\"1\":{\"12\":1}}],[\"complementary\",{\"1\":{\"8\":1}}],[\"c\",{\"1\":{\"9\":3}}],[\"解为\",{\"1\":{\"10\":2,\"11\":2}}],[\"解\",{\"1\":{\"10\":1,\"12\":1}}],[\"解决\",{\"1\":{\"9\":1,\"12\":1}}],[\"解释\",{\"0\":{\"11\":1},\"1\":{\"8\":1,\"11\":1}}],[\"实际上\",{\"1\":{\"9\":1,\"12\":1}}],[\"实数\",{\"1\":{\"5\":1}}],[\"<\",{\"1\":{\"9\":1,\"12\":1}}],[\"错误\",{\"1\":{\"9\":2}}],[\"允许\",{\"1\":{\"9\":1}}],[\"软\",{\"1\":{\"9\":4}}],[\"由\",{\"1\":{\"9\":1,\"13\":1}}],[\"由于\",{\"1\":{\"7\":1,\"8\":1,\"11\":2,\"12\":1,\"13\":3}}],[\"就是\",{\"1\":{\"9\":2}}],[\"使得\",{\"1\":{\"11\":1}}],[\"使\",{\"1\":{\"9\":1}}],[\"数据\",{\"1\":{\"9\":2}}],[\"处理\",{\"1\":{\"9\":2}}],[\"只用\",{\"1\":{\"12\":1}}],[\"只能\",{\"1\":{\"9\":1,\"13\":1}}],[\"只有\",{\"1\":{\"8\":3,\"11\":1}}],[\"敏感\",{\"1\":{\"9\":1}}],[\"非常\",{\"1\":{\"9\":1}}],[\"噪声\",{\"1\":{\"9\":1}}],[\"好\",{\"1\":{\"9\":1}}],[\"很\",{\"1\":{\"9\":1}}],[\"然而\",{\"1\":{\"9\":1,\"11\":1}}],[\"计算\",{\"1\":{\"8\":1}}],[\"计算公式\",{\"1\":{\"6\":1}}],[\"5\",{\"1\":{\"8\":1}}],[\"后\",{\"1\":{\"8\":1}}],[\"出\",{\"1\":{\"8\":2}}],[\"困难\",{\"1\":{\"8\":1}}],[\"单纯\",{\"1\":{\"8\":1}}],[\"式\",{\"1\":{\"8\":1}}],[\"推导\",{\"1\":{\"8\":1}}],[\"推到\",{\"1\":{\"8\":2}}],[\"完成\",{\"1\":{\"8\":1}}],[\"改进\",{\"1\":{\"9\":1}}],[\"改变\",{\"1\":{\"8\":1}}],[\"改有\",{\"1\":{\"7\":1}}],[\"因为\",{\"1\":{\"8\":1}}],[\"因此\",{\"1\":{\"5\":2,\"6\":1,\"7\":1,\"8\":2,\"9\":3,\"10\":1,\"11\":1,\"12\":1}}],[\"外部\",{\"1\":{\"8\":1}}],[\"；\",{\"1\":{\"8\":1}}],[\"新\",{\"1\":{\"8\":2}}],[\"增加\",{\"1\":{\"8\":2}}],[\"均\",{\"1\":{\"8\":1}}],[\"零\",{\"1\":{\"8\":2}}],[\"虚线\",{\"1\":{\"8\":3}}],[\"图中\",{\"1\":{\"11\":1}}],[\"图中用\",{\"1\":{\"11\":1}}],[\"图形\",{\"1\":{\"11\":2}}],[\"图\",{\"1\":{\"8\":1,\"11\":3}}],[\"这\",{\"1\":{\"9\":1}}],[\"这些\",{\"1\":{\"8\":2}}],[\"这个\",{\"1\":{\"5\":1,\"11\":1}}],[\"仅\",{\"1\":{\"8\":1}}],[\"根据\",{\"1\":{\"8\":1}}],[\"？\",{\"1\":{\"8\":1}}],[\"呢\",{\"1\":{\"8\":1,\"11\":1}}],[\"下图\",{\"1\":{\"11\":1}}],[\"下\",{\"1\":{\"8\":1,\"11\":3}}],[\"下面\",{\"1\":{\"7\":3}}],[\"情况\",{\"1\":{\"8\":1}}],[\"什么\",{\"1\":{\"8\":1,\"11\":1}}],[\"生成\",{\"1\":{\"8\":2}}],[\"平面\",{\"1\":{\"8\":4}}],[\"决策\",{\"1\":{\"8\":4}}],[\"才\",{\"1\":{\"8\":2,\"11\":1}}],[\"\",{\"1\":{\"8\":3,\"10\":1}}],[\"当然\",{\"1\":{\"13\":1}}],[\"当且\",{\"1\":{\"8\":1}}],[\"当\",{\"1\":{\"8\":4,\"11\":3,\"13\":1}}],[\"从\",{\"1\":{\"8\":2}}],[\"表达形式\",{\"1\":{\"10\":1}}],[\"表达式\",{\"1\":{\"8\":2,\"9\":1}}],[\"表示\",{\"1\":{\"5\":2,\"8\":2,\"11\":3}}],[\"⇔\",{\"1\":{\"8\":4}}],[\"先\",{\"1\":{\"8\":1,\"12\":1}}],[\"同样\",{\"1\":{\"8\":1}}],[\"同时\",{\"1\":{\"5\":1,\"11\":1}}],[\"接下来\",{\"1\":{\"8\":1}}],[\"方式\",{\"1\":{\"9\":1}}],[\"方法\",{\"1\":{\"8\":1}}],[\"方便\",{\"1\":{\"5\":1}}],[\"所在\",{\"1\":{\"11\":1}}],[\"所示\",{\"1\":{\"11\":1}}],[\"所\",{\"1\":{\"10\":1}}],[\"所以\",{\"1\":{\"8\":1,\"13\":3}}],[\"所有\",{\"1\":{\"6\":1,\"7\":1}}],[\"∗\",{\"1\":{\"8\":9,\"9\":2,\"10\":4,\"11\":12,\"13\":24}}],[\"时候\",{\"1\":{\"11\":1}}],[\"时\",{\"1\":{\"8\":2,\"11\":3,\"13\":1}}],[\"取得\",{\"1\":{\"8\":1,\"11\":4}}],[\"取值\",{\"1\":{\"5\":1,\"11\":2}}],[\"已经\",{\"1\":{\"8\":4}}],[\"小节\",{\"1\":{\"8\":1}}],[\"小结\",{\"1\":{\"7\":1}}],[\"松弛\",{\"1\":{\"8\":1,\"13\":1}}],[\"互补\",{\"1\":{\"8\":1,\"13\":1}}],[\"互为\",{\"1\":{\"8\":1}}],[\"又\",{\"1\":{\"8\":1,\"9\":1}}],[\"⎧\",{\"1\":{\"8\":1,\"10\":1,\"13\":3}}],[\"⎨\",{\"1\":{\"8\":1,\"10\":1,\"13\":3}}],[\"⎩\",{\"1\":{\"8\":1,\"10\":1,\"13\":3}}],[\"以下\",{\"1\":{\"8\":1,\"9\":2}}],[\"会\",{\"1\":{\"8\":4}}],[\"相对\",{\"1\":{\"12\":1}}],[\"相切\",{\"1\":{\"11\":2}}],[\"相交\",{\"1\":{\"11\":1}}],[\"相同\",{\"1\":{\"9\":1}}],[\"相似\",{\"1\":{\"9\":1}}],[\"相互\",{\"1\":{\"8\":1}}],[\"相关\",{\"1\":{\"8\":1}}],[\"介绍\",{\"1\":{\"8\":1}}],[\"必要条件\",{\"1\":{\"8\":1}}],[\"充分\",{\"1\":{\"8\":1}}],[\"、\",{\"1\":{\"8\":1}}],[\"参数\",{\"0\":{\"8\":1},\"1\":{\"8\":3,\"9\":2}}],[\"内部\",{\"1\":{\"7\":1,\"8\":1,\"12\":1}}],[\"消去\",{\"1\":{\"7\":1}}],[\"4\",{\"1\":{\"7\":1,\"8\":2}}],[\"3\",{\"1\":{\"7\":2}}],[\"⇒\",{\"1\":{\"7\":3,\"12\":1}}],[\"三次\",{\"1\":{\"7\":1}}],[\"至此\",{\"1\":{\"7\":1,\"8\":2}}],[\"x0\",{\"1\":{\"12\":1}}],[\"xmin\",{\"1\":{\"10\":2,\"11\":3,\"13\":1}}],[\"xbad\",{\"1\":{\"10\":1}}],[\"xgood\",{\"1\":{\"10\":3}}],[\"x\",{\"1\":{\"10\":20,\"11\":13,\"12\":3,\"13\":27}}],[\"xk\",{\"1\":{\"8\":3}}],[\"xj\",{\"1\":{\"7\":4}}],[\"xit\",{\"1\":{\"7\":4,\"8\":2}}],[\"xi\",{\"1\":{\"5\":2,\"6\":2,\"7\":6,\"8\":4}}],[\"yk2\",{\"1\":{\"8\":1}}],[\"yk\",{\"1\":{\"8\":9}}],[\"yj\",{\"1\":{\"7\":4}}],[\"yi\",{\"1\":{\"5\":6,\"6\":2,\"7\":24,\"8\":11,\"9\":7}}],[\"j\",{\"1\":{\"7\":8,\"10\":3,\"13\":8}}],[\"]\",{\"1\":{\"7\":2}}],[\"[\",{\"1\":{\"7\":2}}],[\"∂\",{\"1\":{\"7\":8,\"8\":4}}],[\"有解\",{\"1\":{\"12\":1}}],[\"有\",{\"1\":{\"7\":5,\"8\":1,\"11\":2,\"13\":1}}],[\"偏导\",{\"1\":{\"7\":4}}],[\"求\",{\"1\":{\"7\":4}}],[\"求解\",{\"0\":{\"8\":1},\"1\":{\"5\":2,\"6\":1,\"7\":3,\"8\":4,\"9\":2}}],[\"回到\",{\"1\":{\"7\":1}}],[\"让\",{\"1\":{\"7\":1}}],[\"给出\",{\"1\":{\"7\":1,\"10\":1}}],[\"末尾\",{\"1\":{\"7\":1,\"8\":1}}],[\"条件\",{\"0\":{\"8\":1},\"1\":{\"7\":1,\"8\":8,\"11\":1,\"12\":4,\"13\":2}}],[\"满足\",{\"1\":{\"7\":1,\"8\":2,\"12\":2}}],[\"凸时\",{\"1\":{\"11\":1}}],[\"凸\",{\"1\":{\"7\":1,\"11\":2,\"12\":2}}],[\"二次\",{\"1\":{\"7\":1}}],[\"二类\",{\"1\":{\"4\":1}}],[\"保证\",{\"1\":{\"7\":2,\"11\":3,\"12\":1}}],[\"弱\",{\"0\":{\"10\":1},\"1\":{\"7\":2,\"10\":3}}],[\"强\",{\"1\":{\"7\":4,\"8\":2,\"11\":2,\"12\":1}}],[\"关系\",{\"0\":{\"10\":1},\"1\":{\"7\":7,\"8\":2,\"11\":2,\"12\":1,\"13\":1}}],[\"关于\",{\"0\":{\"0\":1},\"1\":{\"13\":2}}],[\"存在\",{\"1\":{\"7\":1,\"12\":1}}],[\"综上\",{\"1\":{\"7\":1}}],[\"∞\",{\"1\":{\"7\":2,\"10\":4}}],[\">\",{\"1\":{\"7\":1,\"10\":1}}],[\"与\",{\"1\":{\"7\":2,\"11\":4}}],[\"证明\",{\"0\":{\"10\":1},\"1\":{\"7\":2,\"10\":5}}],[\"称\",{\"1\":{\"8\":1}}],[\"称作\",{\"1\":{\"7\":1}}],[\"称式\",{\"1\":{\"7\":1}}],[\"称为\",{\"1\":{\"5\":2,\"8\":1,\"9\":1}}],[\"转化\",{\"1\":{\"7\":6,\"10\":1,\"11\":1}}],[\"函数\",{\"1\":{\"7\":2,\"10\":1,\"12\":3,\"13\":1}}],[\"∑\",{\"1\":{\"7\":31,\"8\":4,\"9\":2,\"10\":2,\"13\":6}}],[\"λ\",{\"1\":{\"7\":54,\"8\":17,\"10\":20,\"11\":19,\"13\":20}}],[\"loss\",{\"1\":{\"9\":5}}],[\"l\",{\"1\":{\"7\":15,\"8\":3,\"10\":13,\"11\":3,\"13\":7}}],[\"乘子法\",{\"1\":{\"7\":2}}],[\"日\",{\"1\":{\"7\":11,\"10\":1,\"11\":1,\"13\":1}}],[\"拉格朗\",{\"1\":{\"7\":11,\"10\":1,\"11\":1,\"13\":1}}],[\"应用\",{\"1\":{\"7\":2}}],[\"应该\",{\"1\":{\"5\":1,\"12\":1}}],[\"约束\",{\"1\":{\"7\":4,\"10\":3}}],[\"简单\",{\"1\":{\"7\":1}}],[\"简要\",{\"1\":{\"7\":1,\"8\":1}}],[\"简称\",{\"1\":{\"7\":1}}],[\"简介\",{\"0\":{\"4\":1}}],[\"上\",{\"1\":{\"7\":1,\"8\":4}}],[\"上式\",{\"1\":{\"7\":1,\"9\":1}}],[\"上述\",{\"1\":{\"6\":1}}],[\"叙述\",{\"1\":{\"7\":2}}],[\"≤\",{\"1\":{\"7\":3,\"9\":1,\"10\":6,\"11\":3,\"12\":2,\"13\":10}}],[\"于\",{\"1\":{\"7\":1}}],[\"等价\",{\"1\":{\"7\":3,\"10\":2}}],[\"原\",{\"1\":{\"7\":12,\"8\":1,\"10\":2,\"11\":3,\"12\":1,\"13\":3}}],[\"经过\",{\"1\":{\"7\":1}}],[\"化简\",{\"0\":{\"7\":1},\"1\":{\"7\":2,\"11\":1}}],[\"故强\",{\"1\":{\"7\":1}}],[\"故其为\",{\"1\":{\"7\":1}}],[\"故\",{\"1\":{\"6\":1,\"10\":2,\"11\":1}}],[\"∣\",{\"1\":{\"6\":22,\"7\":6,\"11\":4}}],[\"需要\",{\"1\":{\"6\":1,\"9\":1,\"10\":1,\"11\":1,\"12\":1}}],[\"首先\",{\"1\":{\"6\":1,\"7\":1,\"8\":1,\"10\":2,\"11\":1}}],[\"优化\",{\"1\":{\"6\":1,\"7\":2,\"10\":2,\"11\":2,\"12\":3}}],[\"不难\",{\"1\":{\"11\":2}}],[\"不妨\",{\"1\":{\"11\":1}}],[\"不再\",{\"1\":{\"9\":1}}],[\"不可\",{\"1\":{\"9\":1}}],[\"不是\",{\"1\":{\"9\":1}}],[\"不\",{\"1\":{\"5\":1,\"8\":2,\"12\":1}}],[\"不会\",{\"1\":{\"5\":1,\"8\":2,\"10\":1}}],[\"令\",{\"1\":{\"5\":1,\"9\":1,\"11\":1}}],[\"却会\",{\"1\":{\"5\":1}}],[\"位置\",{\"1\":{\"5\":1,\"7\":1}}],[\"影响\",{\"1\":{\"5\":3,\"8\":2}}],[\"并不知道\",{\"1\":{\"11\":1}}],[\"并称\",{\"1\":{\"7\":1}}],[\"并\",{\"1\":{\"5\":1,\"8\":1,\"9\":1,\"12\":1}}],[\"并且\",{\"1\":{\"5\":1,\"7\":1,\"9\":2}}],[\"缩放\",{\"1\":{\"5\":1}}],[\"和\",{\"1\":{\"5\":1,\"7\":3,\"8\":2,\"9\":1,\"10\":2}}],[\"对应\",{\"1\":{\"8\":2,\"10\":1}}],[\"对原\",{\"1\":{\"7\":1,\"11\":1}}],[\"对于\",{\"1\":{\"7\":1,\"8\":1,\"9\":1,\"12\":1}}],[\"对偶性\",{\"0\":{\"11\":1},\"1\":{\"10\":3,\"11\":1}}],[\"对偶\",{\"0\":{\"10\":1},\"1\":{\"7\":14,\"8\":3,\"10\":3,\"11\":3,\"12\":1,\"13\":2}}],[\"对\",{\"1\":{\"5\":1,\"7\":3,\"9\":2,\"11\":1,\"13\":1}}],[\"到\",{\"1\":{\"5\":1,\"8\":1,\"10\":1}}],[\"到底\",{\"1\":{\"1\":1}}],[\"注意\",{\"1\":{\"5\":1,\"8\":1,\"10\":1,\"12\":1}}],[\"m1\",{\"1\":{\"11\":3}}],[\"m\",{\"1\":{\"10\":1,\"12\":4,\"13\":7}}],[\"mnj\",{\"1\":{\"10\":1,\"13\":2}}],[\"mi\",{\"1\":{\"10\":5,\"11\":1,\"12\":2,\"13\":7}}],[\"minf\",{\"1\":{\"13\":1}}],[\"minx\",{\"1\":{\"10\":6,\"11\":1,\"12\":1,\"13\":2}}],[\"minxi\",{\"1\":{\"7\":1}}],[\"minmaxl\",{\"1\":{\"7\":2}}],[\"minw\",{\"1\":{\"7\":7,\"9\":2}}],[\"min\",{\"1\":{\"5\":1,\"6\":3,\"7\":1,\"9\":1,\"10\":1,\"11\":1}}],[\"marigin\",{\"1\":{\"6\":1}}],[\"margin\",{\"1\":{\"5\":3,\"6\":2}}],[\"maxminl\",{\"1\":{\"7\":2}}],[\"maxw\",{\"1\":{\"7\":1}}],[\"max\",{\"1\":{\"5\":2,\"7\":8,\"9\":1,\"10\":10,\"11\":4,\"13\":2}}],[\"γ\",{\"1\":{\"5\":4}}],[\"∃\",{\"1\":{\"5\":1,\"8\":1,\"12\":1}}],[\"问题\",{\"1\":{\"5\":2,\"6\":1,\"7\":26,\"8\":3,\"9\":1,\"10\":7,\"11\":7,\"12\":4,\"13\":4}}],[\"最高\",{\"1\":{\"12\":1}}],[\"最大值\",{\"1\":{\"11\":2}}],[\"最大化\",{\"1\":{\"5\":2}}],[\"最终\",{\"1\":{\"10\":1}}],[\"最小值\",{\"1\":{\"8\":1,\"11\":3}}],[\"最小\",{\"1\":{\"6\":1}}],[\"最优化\",{\"1\":{\"5\":2,\"7\":3,\"8\":1,\"9\":1}}],[\"而\",{\"1\":{\"5\":2,\"8\":2,\"11\":1}}],[\"进行\",{\"1\":{\"5\":2,\"7\":1,\"9\":1,\"11\":3}}],[\"了\",{\"1\":{\"5\":2,\"7\":3,\"8\":4,\"10\":2,\"12\":2}}],[\"⋯\",{\"1\":{\"5\":4,\"6\":1,\"7\":1,\"10\":2,\"12\":2,\"13\":8}}],[\"21\",{\"1\":{\"7\":15,\"9\":3}}],[\"2\",{\"1\":{\"5\":4,\"6\":1,\"7\":4,\"10\":2,\"12\":2,\"13\":8}}],[\"≥\",{\"1\":{\"5\":4,\"7\":5,\"8\":2,\"9\":3,\"10\":3,\"11\":2,\"13\":2}}],[\"txi\",{\"1\":{\"7\":1}}],[\"t\",{\"1\":{\"5\":2,\"7\":5,\"8\":1,\"9\":2,\"10\":3,\"11\":10,\"12\":2,\"13\":2}}],[\"strongduality\",{\"1\":{\"12\":1}}],[\"slackness\",{\"1\":{\"8\":1}}],[\"slatercondition\",{\"1\":{\"12\":1}}],[\"slater\",{\"0\":{\"12\":1},\"1\":{\"7\":1,\"11\":1,\"12\":5}}],[\"s\",{\"1\":{\"5\":2,\"7\":4,\"8\":1,\"9\":2,\"10\":3,\"11\":1,\"12\":2,\"13\":2}}],[\"svm\",{\"0\":{\"4\":1},\"1\":{\"4\":1,\"5\":2}}],[\"可行\",{\"1\":{\"13\":1}}],[\"可得\",{\"1\":{\"7\":1}}],[\"可以\",{\"1\":{\"5\":3,\"7\":1,\"8\":3,\"9\":1,\"10\":1,\"11\":1}}],[\"可分\",{\"0\":{\"5\":1,\"7\":1},\"1\":{\"4\":1,\"5\":1,\"8\":2,\"9\":3}}],[\"目标\",{\"0\":{\"7\":1},\"1\":{\"5\":1,\"7\":1,\"9\":1}}],[\"目录\",{\"1\":{\"3\":1,\"14\":1}}],[\"距离\",{\"1\":{\"5\":2,\"6\":2}}],[\"划分\",{\"1\":{\"5\":2}}],[\"正确\",{\"1\":{\"5\":2}}],[\"能够\",{\"1\":{\"5\":2,\"9\":2,\"11\":1}}],[\"在\",{\"1\":{\"5\":1,\"7\":4,\"8\":8,\"10\":1,\"11\":2,\"12\":2}}],[\"维\",{\"1\":{\"5\":1}}],[\"为强\",{\"1\":{\"13\":1}}],[\"为原\",{\"1\":{\"7\":2}}],[\"为了\",{\"1\":{\"5\":1,\"6\":1,\"7\":4,\"11\":1}}],[\"为\",{\"1\":{\"5\":2,\"6\":2,\"7\":6,\"8\":5,\"9\":2,\"10\":3,\"11\":12,\"12\":4,\"13\":4}}],[\"wtw\",{\"1\":{\"7\":10,\"9\":3}}],[\"wtxk\",{\"1\":{\"8\":3}}],[\"wtxi\",{\"1\":{\"5\":4,\"6\":3,\"7\":9,\"8\":5,\"9\":7}}],[\"wtx\",{\"1\":{\"5\":1,\"8\":2}}],[\"w\",{\"1\":{\"5\":4,\"6\":10,\"7\":18,\"8\":8,\"9\":1}}],[\"01\",{\"1\":{\"8\":1}}],[\"0.\",{\"1\":{\"7\":1,\"8\":2}}],[\"0\",{\"1\":{\"5\":5,\"7\":13,\"8\":8,\"9\":4,\"10\":6,\"11\":5,\"12\":3,\"13\":12}}],[\"bi\",{\"1\":{\"7\":1}}],[\"bmax\",{\"1\":{\"6\":4}}],[\"b\",{\"1\":{\"5\":9,\"6\":5,\"7\":36,\"8\":16,\"9\":10}}],[\"+\",{\"1\":{\"5\":5,\"6\":3,\"7\":18,\"8\":9,\"9\":10,\"10\":2,\"11\":5,\"12\":1,\"13\":4}}],[\"写作\",{\"1\":{\"5\":2,\"9\":1}}],[\"则\",{\"1\":{\"5\":2,\"7\":3,\"9\":3,\"10\":2,\"11\":2,\"12\":2,\"13\":1}}],[\"−\",{\"1\":{\"5\":1,\"7\":15,\"8\":9,\"9\":5,\"11\":2,\"12\":1}}],[\"∈\",{\"1\":{\"5\":2,\"8\":1,\"10\":1,\"11\":5,\"12\":2}}],[\"nj\",{\"1\":{\"10\":1,\"13\":3}}],[\"nmin\",{\"1\":{\"6\":1}}],[\"n\",{\"1\":{\"5\":6,\"7\":32,\"8\":4,\"9\":2,\"10\":2,\"13\":5}}],[\"100\",{\"1\":{\"11\":3}}],[\"1\",{\"1\":{\"5\":8,\"6\":3,\"7\":40,\"8\":12,\"9\":9,\"10\":4,\"11\":3,\"12\":3,\"13\":14}}],[\"=\",{\"1\":{\"5\":8,\"6\":6,\"7\":57,\"8\":22,\"9\":5,\"10\":9,\"11\":14,\"12\":2,\"13\":29}}],[\"interior\",{\"1\":{\"12\":1}}],[\"inf\",{\"1\":{\"11\":2}}],[\"init\",{\"0\":{\"2\":1}}],[\"i\",{\"1\":{\"5\":5,\"6\":1,\"7\":58,\"8\":20,\"9\":6,\"10\":6,\"12\":2,\"13\":16}}],[\"}\",{\"1\":{\"5\":2,\"8\":1,\"9\":1,\"10\":1,\"11\":5}}],[\"​\",{\"1\":{\"5\":14,\"6\":18,\"7\":177,\"8\":66,\"9\":27,\"10\":44,\"11\":23,\"12\":5,\"13\":44}}],[\"{\",{\"1\":{\"5\":3,\"7\":5,\"8\":2,\"9\":3,\"10\":3,\"11\":6,\"12\":1,\"13\":2}}],[\":\",{\"1\":{\"5\":3,\"6\":2,\"7\":6,\"8\":1,\"9\":1,\"10\":1,\"12\":2,\"13\":3}}],[\"记\",{\"1\":{\"10\":1,\"11\":2}}],[\"记此\",{\"1\":{\"8\":1}}],[\"记作\",{\"1\":{\"5\":2}}],[\"记录\",{\"1\":{\"4\":1}}],[\"集合\",{\"1\":{\"5\":3,\"11\":2}}],[\"点时\",{\"1\":{\"8\":2}}],[\"点到\",{\"1\":{\"5\":1,\"6\":1}}],[\"点\",{\"1\":{\"5\":4,\"8\":5,\"9\":1,\"11\":1}}],[\"点击\",{\"1\":{\"3\":1,\"14\":1}}],[\"样本\",{\"1\":{\"5\":5,\"6\":1,\"8\":5}}],[\"中有\",{\"1\":{\"12\":1}}],[\"中\",{\"1\":{\"5\":2,\"6\":1,\"7\":2,\"8\":1,\"11\":2}}],[\"空间\",{\"1\":{\"5\":1}}],[\"特征\",{\"1\":{\"5\":1}}],[\"分\",{\"1\":{\"9\":1}}],[\"分布\",{\"1\":{\"8\":1}}],[\"分别\",{\"1\":{\"7\":3,\"13\":1}}],[\"分割\",{\"1\":{\"5\":4}}],[\"分离\",{\"1\":{\"5\":1}}],[\"分类\",{\"1\":{\"4\":1,\"9\":1}}],[\"来\",{\"1\":{\"5\":1,\"8\":2,\"9\":1,\"11\":1}}],[\"超\",{\"1\":{\"9\":1}}],[\"超平面\",{\"1\":{\"5\":6,\"6\":1}}],[\"超想\",{\"1\":{\"0\":1}}],[\"其次\",{\"1\":{\"10\":1}}],[\"其余\",{\"1\":{\"8\":1}}],[\"其为\",{\"1\":{\"7\":1}}],[\"其中\",{\"1\":{\"5\":2,\"7\":2,\"8\":1,\"9\":1,\"12\":1}}],[\"其\",{\"1\":{\"5\":1,\"7\":3,\"8\":1,\"9\":3,\"10\":2,\"11\":3,\"12\":1}}],[\",\",{\"1\":{\"5\":44,\"6\":16,\"7\":98,\"8\":42,\"9\":29,\"10\":58,\"11\":50,\"12\":23,\"13\":72}}],[\"间隔\",{\"0\":{\"6\":1},\"1\":{\"5\":5,\"6\":2,\"9\":5}}],[\"硬\",{\"1\":{\"5\":3,\"9\":1}}],[\"被\",{\"1\":{\"5\":2,\"6\":1,\"8\":1,\"9\":1}}],[\"通用\",{\"1\":{\"10\":1}}],[\"通常\",{\"1\":{\"5\":1,\"9\":1}}],[\"通过\",{\"0\":{\"8\":1},\"1\":{\"2\":1,\"5\":1,\"7\":3,\"8\":4,\"9\":1,\"11\":2}}],[\"定义域\",{\"1\":{\"11\":1}}],[\"定义\",{\"0\":{\"5\":1,\"6\":1},\"1\":{\"6\":2,\"7\":1,\"9\":1,\"11\":1,\"13\":1}}],[\"算法\",{\"1\":{\"4\":1}}],[\"算是\",{\"1\":{\"2\":1}}],[\"学习\",{\"0\":{\"7\":1},\"1\":{\"4\":1,\"5\":1,\"9\":1}}],[\"主要\",{\"1\":{\"4\":1}}],[\"主页\",{\"0\":{\"1\":1}}],[\"将会\",{\"1\":{\"7\":1}}],[\"将\",{\"1\":{\"4\":1,\"5\":2,\"7\":9,\"8\":1,\"10\":1,\"11\":3}}],[\".\",{\"1\":{\"4\":2,\"5\":11,\"6\":2,\"7\":19,\"8\":19,\"9\":12,\"10\":12,\"11\":18,\"12\":9,\"13\":4}}],[\"模型\",{\"1\":{\"4\":1,\"9\":1}}],[\"一部分\",{\"1\":{\"11\":1}}],[\"一定\",{\"1\":{\"9\":1}}],[\"一\",{\"1\":{\"8\":1}}],[\"一下\",{\"1\":{\"7\":1}}],[\"一共\",{\"1\":{\"7\":2}}],[\"一种\",{\"1\":{\"4\":1}}],[\"一个\",{\"1\":{\"0\":1,\"5\":2,\"8\":1,\"9\":1,\"10\":1}}],[\"是否\",{\"1\":{\"11\":1}}],[\"是\",{\"1\":{\"4\":1,\"7\":3,\"8\":1,\"10\":2,\"11\":1,\"12\":3}}],[\")\",{\"1\":{\"4\":1,\"5\":11,\"6\":7,\"7\":38,\"8\":17,\"9\":11,\"10\":28,\"11\":27,\"12\":5,\"13\":27}}],[\"(\",{\"1\":{\"4\":1,\"5\":11,\"6\":7,\"7\":38,\"8\":17,\"9\":11,\"10\":28,\"11\":27,\"12\":5,\"13\":27}}],[\"机并\",{\"1\":{\"9\":1}}],[\"机中\",{\"1\":{\"4\":1}}],[\"机\",{\"0\":{\"5\":1,\"7\":1,\"9\":1},\"1\":{\"4\":1,\"5\":2,\"8\":2,\"9\":8,\"12\":1}}],[\"向量\",{\"0\":{\"5\":1,\"7\":1,\"9\":1},\"1\":{\"4\":2,\"5\":3,\"8\":5,\"9\":9,\"12\":1}}],[\"支持\",{\"0\":{\"5\":1,\"7\":1,\"9\":1},\"1\":{\"4\":2,\"5\":2,\"8\":4,\"9\":9,\"12\":1}}],[\"️\",{\"1\":{\"3\":1,\"14\":1}}],[\"⬅\",{\"1\":{\"3\":1,\"14\":1}}],[\"全部\",{\"1\":{\"3\":1,\"8\":1,\"14\":1}}],[\"浏览\",{\"1\":{\"3\":1,\"14\":1}}],[\"左侧\",{\"1\":{\"3\":1,\"14\":1}}],[\"随笔\",{\"0\":{\"3\":1},\"1\":{\"3\":1}}],[\"看出\",{\"1\":{\"8\":2}}],[\"看\",{\"1\":{\"2\":1}}],[\"走且\",{\"1\":{\"2\":1}}],[\"且\",{\"1\":{\"2\":1,\"7\":1}}],[\"之后\",{\"1\":{\"2\":1,\"7\":3}}],[\"起来\",{\"1\":{\"2\":1}}],[\"搭\",{\"1\":{\"2\":1}}],[\"搭建\",{\"1\":{\"2\":1}}],[\"勉强\",{\"1\":{\"2\":1}}],[\"vuepress\",{\"1\":{\"2\":1}}],[\"尝试\",{\"1\":{\"2\":1,\"8\":1}}],[\"!\",{\"0\":{\"2\":1}}],[\"❗\",{\"1\":{\"1\":1}}],[\" \",{\"0\":{\"12\":1,\"13\":1},\"1\":{\"1\":2,\"4\":1,\"5\":17,\"6\":4,\"7\":42,\"8\":36,\"9\":23,\"10\":12,\"11\":34,\"12\":10,\"13\":9}}],[\"啦\",{\"1\":{\"1\":1}}],[\"真的\",{\"1\":{\"1\":1}}],[\"。\",{\"1\":{\"0\":1,\"2\":1,\"3\":1,\"14\":1}}],[\"😣\",{\"1\":{\"0\":1}}],[\"躺平\",{\"1\":{\"0\":1}}],[\"，\",{\"1\":{\"0\":1,\"2\":2,\"3\":1,\"14\":1}}],[\"的解\",{\"1\":{\"10\":1}}],[\"的\",{\"0\":{\"6\":1,\"7\":1,\"10\":1,\"11\":1},\"1\":{\"0\":1,\"4\":1,\"5\":9,\"6\":4,\"7\":27,\"8\":17,\"9\":10,\"10\":8,\"11\":18,\"12\":10,\"13\":3}}],[\"普普通通\",{\"1\":{\"0\":1}}],[\"我们\",{\"1\":{\"5\":1,\"6\":1,\"7\":3,\"8\":9,\"9\":3,\"10\":4,\"11\":5}}],[\"我\",{\"0\":{\"0\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n}})=>{e==="suggest"?self.postMessage(st(t,v[s],n)):e==="search"?self.postMessage(et(t,v[s],n)):self.postMessage({suggestions:st(t,v[s],n),results:et(t,v[s],n)})};
//# sourceMappingURL=index.js.map
